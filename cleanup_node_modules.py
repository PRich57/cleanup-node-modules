import argparse
import os
import shutil
from pathlib import Path


def get_directory_size(path: Path) -> int:
    return sum(f.stat().st_size for f in path.rglob('*') if f.is_file())


def size_to_string(size_bytes: int) -> str:
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_bytes < 1024:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.2f} PB"


def cleanup_node_modules(root_dir: Path, dry_run: bool = False, max_depth: int | None = None) -> None:
    total_size_freed = 0
    directories_removed = 0

    for root, dirs, _ in os.walk(root_dir):
        current_depth = len(Path(root).relative_to(root_dir).parts)
        if max_depth is not None and current_depth > max_depth:
            dirs.clear()
            continue

        if 'node_modules' in dirs:
            node_modules_path = Path(root) / 'node_modules'
            size = get_directory_size(node_modules_path)
            relative_path = node_modules_path.relative_to(root_dir)
            
            if dry_run:
                print(f"Would remove: {relative_path} (Size: {size_to_string(size)})")
            else:
                print(f"Removing: {relative_path} (Size: {size_to_string(size)})")
                shutil.rmtree(node_modules_path)
            
            total_size_freed += size
            directories_removed += 1
            dirs.remove('node_modules')

    print(f"\nOperation {'would have ' if dry_run else ''}completed.")
    print(f"{'Would have removed' if dry_run else 'Removed'} {directories_removed} node_modules directories.")
    print(f"Total space {'that would be' if dry_run else ''} freed: {size_to_string(total_size_freed)}")


def print_windows_path_instructions() -> None:
    print("If you're using a Windows machine and your path contains backslashes, please try:")
    print("1. Wrapping your path in quotes: \"C:\\example\\path\"")
    print("2. Using forward slashes instead: C:/example/path")
    print("3. Escaping each backslash with another backslash: C:\\\\example\\\\path")


def main() -> None:
    parser = argparse.ArgumentParser(description="Remove nested node_modules directories.")
    parser.add_argument("directory", nargs="?", help="The root directory to start searching from.")
    parser.add_argument("--dry-run", action="store_true", help="Perform a dry run without actually deleting anything.")
    parser.add_argument("--max-depth", type=int, help="Maximum depth to search for node_modules directories.")
    args = parser.parse_args()

    if not args.directory:
        args.directory = input("Enter the root directory to start searching from: ").strip()
    
    root_dir = Path(args.directory).resolve()

    if not root_dir.is_dir():
        print(f"Error: {root_dir} is not a valid directory.")
        print_windows_path_instructions()
        return

    cleanup_node_modules(root_dir, args.dry_run, args.max_depth)


if __name__ == "__main__":
    main()