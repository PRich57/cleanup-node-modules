import os
import shutil
import argparse

def cleanup_node_modules(root_dir, dry_run=False, max_depth=None):
    total_size_freed = 0
    directories_removed = 0

    for root, dirs, files in os.walk(root_dir):
        if max_depth is not None:
            current_depth = root.count(os.path.sep) - root_dir.count(os.path.sep)
            if current_depth > max_depth:
                del dirs[:]  # Don't go deeper
                continue

        if 'node_modules' in dirs:
            node_modules_path = os.path.join(root, 'node_modules')
            try:
                size = get_directory_size(node_modules_path)
                relative_path = os.path.relpath(node_modules_path, root_dir)
                if dry_run:
                    print(f"Would remove: {relative_path} (Size: {size_to_string(size)})")
                else:
                    print(f"Removing: {relative_path} (Size: {size_to_string(size)})")
                    shutil.rmtree(node_modules_path)
                total_size_freed += size
                directories_removed += 1
            except Exception as e:
                print(f"Error processing {node_modules_path}: {e}")
            
            dirs.remove('node_modules')  # Prevent recursing into node_modules

    print(f"\nOperation {'would have ' if dry_run else ''}completed.")
    print(f"{'Would have removed' if dry_run else 'Removed'} {directories_removed} node_modules directories.")
    print(f"Total space {'that would be' if dry_run else ''} freed: {size_to_string(total_size_freed)}")

def get_directory_size(path):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            total_size += os.path.getsize(file_path)
    return total_size

def size_to_string(size_bytes):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_bytes < 1024:
            return f"{size_bytes:.2f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.2f} PB"

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Remove nested node_modules directories.")
    parser.add_argument("directory", nargs="?", help="The root directory to start searching from.")
    parser.add_argument("--dry-run", action="store_true", help="Perform a dry run without actually deleting anything.")
    parser.add_argument("--max-depth", type=int, help="Maximum depth to search for node_modules directories.")
    args = parser.parse_args()

    if not args.directory:
        args.directory = input("Enter the root directory to start searching from: ").strip()

    if not os.path.isdir(args.directory):
        print(f"Error: {args.directory} is not a valid directory.")
    else:
        cleanup_node_modules(args.directory, args.dry_run, args.max_depth)